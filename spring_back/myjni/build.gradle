/*
 * This file was generated by the Gradle 'init' task.
 */
import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'application'
    id 'cpp'
}

repositories {
    mavenCentral()
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

application {
    mainClass = 'tech.itunz.jni.Jni'
    applicationDefaultJvmArgs = ["-Djava.library.path=" + file("${buildDir}/libs/shared").absolutePath]
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    //implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.9'
}

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    components {
        calc(NativeLibrarySpec) {
            targetPlatform "x64"
            sources {
                cpp {
                    source {
                        srcDir 'src/main/calc/cpp'
                        include '**/*.cpp'
                    }
                }
            }
            binaries.all {
                def jvmHome = Jvm.current().javaHome
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    linker.args '-mmacosx-version-min=10.9'
                    linker.args '-stdlib=libc++'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${jvmHome}/include"
                    cCompiler.args "-I${jvmHome}/include/win32"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/freebsd"
                }
            }
        }
    }
}

task compileCpp(type: Exec) {
    commandLine 'g++', '-c', '-fPIC', "-I${System.getenv('JAVA_HOME')}/include", "-I${System.getenv('JAVA_HOME')}/include/linux", '-I', 'build/generated/sources/headers/java/main', 'src/calc/cpp/calc.cpp', '-o', 'build/libs/calc.o'
}

task compileErrorHandle(type: Exec) {
    commandLine 'g++', '-c', '-fPIC', 'src/calc/cpp/ErrorHandle.cpp', '-o', 'build/libs/ErrorHandle.o'
}

task compileImatters(type: Exec) {
    commandLine 'g++', '-c', '-fPIC', 'src/calc/cpp/Imatters.cpp', '-o', 'build/libs/Imatters.o'
}

task compileProcessComp(type: Exec) {
    commandLine 'g++', '-c', '-fPIC', 'src/calc/cpp/ProcessComp.cpp', '-o', 'build/libs/ProcessComp.o'   
}

task makeSharedDirectory(type: Exec) {
    commandLine 'mkdir', '-p', 'build/libs/shared'
}

task linkLibrary(type: Exec) {
    commandLine 'g++', '-shared', '-fPIC', '-o', 'build/libs/shared/libcalc.so', 'build/libs/calc.o', 'build/libs/ProcessComp.o', 'build/libs/Imatters.o', 'build/libs/ErrorHandle.o', '-lc'
}

// Ensure that the linkLibrary task is executed when building the project
assemble.dependsOn linkLibrary
linkLibrary.dependsOn makeSharedDirectory
makeSharedDirectory.dependsOn compileCpp
compileCpp.dependsOn compileProcessComp
compileProcessComp.dependsOn compileImatters
compileImatters.dependsOn compileErrorHandle
